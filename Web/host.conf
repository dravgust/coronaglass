akka {

	#"Akka.Logger.NLog.NLogLogger, Akka.Logger.NLog", "Akka.Event.TraceLogger, Akka", "Akka.Event.DefaultLogger"
	loggers = ["Akka.Event.TraceLogger, Akka", "Akka.Logger.NLog.NLogLogger, Akka.Logger.NLog"]
	stdout-loglevel = INFO
	loglevel = INFO
	log-config-on-start = off    
	
	actor {
		#provider =  remote

		debug {  
              receive = on 
              autoreceive = on
              lifecycle = on
              event-stream = on
              unhandled = on
        }

		deployment {
			/EmailSender {
				router = smallest-mailbox-pool
				nr-of-instaances = 3
			}
			/EmailGateway {
				router = round-robin-pool
				#nr-of-instaances = 2
				resizer {
					enabled = on
					lower-bound = 1
					upper-bound = 3
					messages-per-resize = 10 #default
					rampup-rate = 0.2 #default
					backoff-rate = 0.1 #default
					pressure-threshold = 1 #default
					backoff-threshold = 0.3 #default
				}
			}
		}
	}

	persistence {
		journal {
			
			inmem {
				# Class name of the plugin.
				class = "Akka.Persistence.Journal.MemoryJournal, Akka.Persistence"
				# Dispatcher for the plugin actor.
				plugin-dispatcher = "akka.actor.default-dispatcher"
			}
		}

		snapshot-store {

			plugin = "akka.persistence.snapshot-store.inmem"
			
			inmem {
				# Class name of the plugin.
				class = "Akka.Persistence.Snapshot.MemorySnapshotStore, Akka.Persistence"
				# Dispatcher for the plugin actor.
				plugin-dispatcher = "akka.actor.default-dispatcher"
			}
		}
	}

	remote {

		dot-netty.tcp {
			hostname = localhost
			port = 0
		}

		log-remote-lifecycle-events = ERROR
	}	
}